// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat_groups.sql

package database

import (
	"context"
)

const createChatGroup = `-- name: CreateChatGroup :one
INSERT INTO chat_groups (chat_id, user_id)
SELECT $1, $2
WHERE NOT EXISTS( 
    SELECT chat_group_id, chat_id, user_id FROM chat_groups
    WHERE chat_id = $1 AND user_id = $2
)
RETURNING chat_group_id, chat_id, user_id
`

type CreateChatGroupParams struct {
	ChatID int32
	UserID string
}

func (q *Queries) CreateChatGroup(ctx context.Context, arg CreateChatGroupParams) (ChatGroup, error) {
	row := q.db.QueryRowContext(ctx, createChatGroup, arg.ChatID, arg.UserID)
	var i ChatGroup
	err := row.Scan(&i.ChatGroupID, &i.ChatID, &i.UserID)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM chat_groups
WHERE chat_id = $1
`

func (q *Queries) DeleteGroup(ctx context.Context, chatID int32) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, chatID)
	return err
}

const getAllChatNamesForUser = `-- name: GetAllChatNamesForUser :many
SELECT name
FROM chats
JOIN chat_groups ON chats.chat_id = chat_groups.chat_id
WHERE chat_groups.user_id = $1
`

func (q *Queries) GetAllChatNamesForUser(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllChatNamesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFromGroup = `-- name: GetAllFromGroup :many
SELECT chat_group_id, chat_id, user_id FROM chat_groups
WHERE chat_id = $1
`

func (q *Queries) GetAllFromGroup(ctx context.Context, chatID int32) ([]ChatGroup, error) {
	rows, err := q.db.QueryContext(ctx, getAllFromGroup, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatGroup
	for rows.Next() {
		var i ChatGroup
		if err := rows.Scan(&i.ChatGroupID, &i.ChatID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroupsForUser = `-- name: GetAllGroupsForUser :many
SELECT chat_group_id, chat_id, user_id FROM chat_groups
WHERE user_id = $1
`

func (q *Queries) GetAllGroupsForUser(ctx context.Context, userID string) ([]ChatGroup, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroupsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatGroup
	for rows.Next() {
		var i ChatGroup
		if err := rows.Scan(&i.ChatGroupID, &i.ChatID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFromGroup = `-- name: RemoveFromGroup :exec
DELETE FROM chat_groups
WHERE chat_id = $1 AND user_id = $2
`

type RemoveFromGroupParams struct {
	ChatID int32
	UserID string
}

func (q *Queries) RemoveFromGroup(ctx context.Context, arg RemoveFromGroupParams) error {
	_, err := q.db.ExecContext(ctx, removeFromGroup, arg.ChatID, arg.UserID)
	return err
}
